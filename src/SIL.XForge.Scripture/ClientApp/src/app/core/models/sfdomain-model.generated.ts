/* tslint:disable:ordered-imports max-line-length */
// <auto-generated>
//     Generated with CodeGeneratorApp v9.12.0.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
//     Last Generated on 192019-2-13 14:52
// </auto-generated>

import { Project } from 'xforge-common/models/project';
import { ProjectRef } from 'xforge-common/models/project';
import { ProjectUser } from 'xforge-common/models/project-user';
import { ProjectUserRef } from 'xforge-common/models/project-user';
import { User } from 'xforge-common/models/user';
import { UserRef } from 'xforge-common/models/user';
import { VerseRef } from './scripture/verse-ref';
import { SFProjectData } from './sfproject-data';
import { SFProjectDataRef } from './sfproject-data';

/** --- Generated Interface */
export interface TaskConfig {
  enabled?: boolean;
}

/** --- Generated Interface */
export interface CheckingConfig extends TaskConfig {
  enabled?: boolean;
  usersSeeEachOthersResponses?: boolean;
}

/** --- Generated Interface */
export interface TranslateConfig extends TaskConfig {
  enabled?: boolean;
  sourceParatextId?: string;
  sourceInputSystem?: InputSystem;
  isTranslationDataShared?: boolean;
  confidenceThreshold?: number;
  metrics?: TranslateMetrics;
}

/** --- Generated Interface */
export interface InputSystem {
  abbreviation?: string;
  tag?: string;
  languageName?: string;
  isRightToLeft?: boolean;
}

/** --- Generated Interface */
export interface TranslateMetrics {
  activeEditTimeout?: number;
  editingTimeout?: number;
}

export abstract class SyncJobBase extends SFProjectData {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'syncJob';
  percentCompleted?: number;
  state?: string;
  constructor(init?: Partial<SyncJobBase>) {
    super(SyncJobBase.TYPE, init);
  }
}

/** ResourceRef class for SyncJobBase **/
export class SyncJobRef extends SFProjectDataRef {
  static readonly TYPE: string = SyncJobBase.TYPE;

  constructor(id: string) {
    super(SyncJobRef.TYPE, id);
  }
}

export abstract class SFUserBase extends User {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'user';
  projects?: SFProjectUserRef[];
  constructor(init?: Partial<SFUserBase>) {
    super(SFUserBase.TYPE, init);
  }
}

/** ResourceRef class for SFUserBase **/
export class SFUserRef extends UserRef {
  static readonly TYPE: string = SFUserBase.TYPE;

  constructor(id: string) {
    super(SFUserRef.TYPE, id);
  }
}

export abstract class SFProjectUserBase extends ProjectUser {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'projectUser';
  translateConfig?: TranslateProjectUserConfig;
  user?: SFUserRef;
  project?: SFProjectRef;
  constructor(init?: Partial<SFProjectUserBase>) {
    super(SFProjectUserBase.TYPE, init);
  }
}

/** ResourceRef class for SFProjectUserBase **/
export class SFProjectUserRef extends ProjectUserRef {
  static readonly TYPE: string = SFProjectUserBase.TYPE;

  constructor(id: string) {
    super(SFProjectUserRef.TYPE, id);
  }
}

/** --- Generated Interface */
export interface TranslateProjectUserConfig {
  confidenceThreshold?: number;
  hasConfidenceOverride?: boolean;
  isDocumentOrientationTargetRight?: boolean;
  isFormattingOptionsShown?: boolean;
  selectedDocumentSetId?: string;
  selectedSegmentRef?: string;
  selectedSegmentChecksum?: number;
}

export abstract class TextBase extends SFProjectData {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'text';
  name?: string;
  bookId?: string;
  constructor(init?: Partial<TextBase>) {
    super(TextBase.TYPE, init);
  }
}

/** ResourceRef class for TextBase **/
export class TextRef extends SFProjectDataRef {
  static readonly TYPE: string = TextBase.TYPE;

  constructor(id: string) {
    super(TextRef.TYPE, id);
  }
}

export abstract class QuestionBase extends SFProjectData {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'question';
  source?: string;
  scriptureStart?: VerseRef;
  scriptureEnd?: VerseRef;
  text?: string;
  constructor(init?: Partial<QuestionBase>) {
    super(QuestionBase.TYPE, init);
  }
}

/** ResourceRef class for QuestionBase **/
export class QuestionRef extends SFProjectDataRef {
  static readonly TYPE: string = QuestionBase.TYPE;

  constructor(id: string) {
    super(QuestionRef.TYPE, id);
  }
}

export enum ScrVersType {
  Unknown = 'Unknown',
  Original = 'Original',
  Septuagint = 'Septuagint',
  Vulgate = 'Vulgate',
  English = 'English',
  RussianProtestant = 'RussianProtestant',
  RussianOrthodox = 'RussianOrthodox'
}

export enum ValidStatusType {
  Valid = 'Valid',
  UnknownVersification = 'UnknownVersification',
  OutOfRange = 'OutOfRange',
  VerseOutOfOrder = 'VerseOutOfOrder',
  VerseRepeated = 'VerseRepeated'
}

export abstract class SFProjectBase extends Project {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'project';
  paratextId?: string;
  checkingConfig?: CheckingConfig;
  translateConfig?: TranslateConfig;
  inputSystem?: InputSystem;
  activeSyncJob?: SyncJobRef;
  users?: SFProjectUserRef[];
  texts?: TextRef[];
  questions?: QuestionRef[];
  constructor(init?: Partial<SFProjectBase>) {
    super(SFProjectBase.TYPE, init);
  }
}

/** ResourceRef class for SFProjectBase **/
export class SFProjectRef extends ProjectRef {
  static readonly TYPE: string = SFProjectBase.TYPE;

  constructor(id: string) {
    super(SFProjectRef.TYPE, id);
  }
}
