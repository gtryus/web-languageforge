/* tslint:disable:ordered-imports line-length */
// <auto-generated>
//     Generated with CodeGeneratorApp v9.12.0.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
//     Last Generated on 182018-16-11 14:12
// </auto-generated>

import { User } from '../../../xforge-common/models/user';
import { UserRef } from '../../../xforge-common/models/user';
import { Text } from './text';
import { TextRef } from './text';
import { Project } from '../../../xforge-common/models/project';
import { ProjectRef } from '../../../xforge-common/models/project';
import { ProjectUser } from '../../../xforge-common/models/project-user';
import { ProjectUserRef } from '../../../xforge-common/models/project-user';
import { ProjectData } from '../../../xforge-common/models/project-data';
import { ProjectDataRef } from '../../../xforge-common/models/project-data';

/** --- Generated Interface */
export interface TaskConfig {
  enabled?: boolean;
}

/** --- Generated Interface */
export interface CheckingConfig extends TaskConfig {
  enabled?: boolean;
  usersSeeEachOthersResponses?: boolean;
}

/** --- Generated Interface */
export interface TranslateConfig extends TaskConfig {
  enabled?: boolean;
  sourceParatextId?: string;
  sourceInputSystem?: InputSystem;
  isTranslationDataShared?: boolean;
  confidenceThreshold?: number;
  metrics?: TranslateMetrics;
}

/** --- Generated Interface */
export interface InputSystem {
  abbreviation?: string;
  tag?: string;
  languageName?: string;
  isRightToLeft?: boolean;
}

/** --- Generated Interface */
export interface TranslateMetrics {
  activeEditTimeout?: number;
  editingTimeout?: number;
}

export abstract class SFProjectDataBase extends ProjectData {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'sfprojectdataresource';
  owner?: SFUserBase;
  project?: SFProjectBase;
}

/** ResourceRef class for SFProjectDataBase **/
export class SFProjectDataRef extends ProjectDataRef {
  // Only the base class needs to define the constructor which takes the type and id
}

export abstract class SyncJobBase extends SFProjectDataBase {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'syncjobresource';
  percentCompleted?: number;
  state?: SyncJobState;
  constructor(init?: Partial<SyncJobBase>) {
    super(SyncJobBase.TYPE, init);
  }
}

/** ResourceRef class for SyncJobBase **/
export class SyncJobRef extends SFProjectDataRef {
  // Only the base class needs to define the constructor which takes the type and id
}

export enum SyncJobState {
  PENDING = 0,
  SYNCING = 1,
  IDLE = 2,
  HOLD = 3
}

export abstract class SFUserBase extends User {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'sfuserresource';
  projects?: SFProjectUserBase[];
  constructor(init?: Partial<SFUserBase>) {
    super(SFUserBase.TYPE, init);
  }
}

/** ResourceRef class for SFUserBase **/
export class SFUserRef extends UserRef {
  // Only the base class needs to define the constructor which takes the type and id
}

export abstract class SFProjectUserBase extends ProjectUser {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'sfprojectuserresource';
  translateConfig?: TranslateProjectUserConfig;
  user?: SFUserBase;
  project?: SFProjectBase;
  constructor(init?: Partial<SFProjectUserBase>) {
    super(SFProjectUserBase.TYPE, init);
  }
}

/** ResourceRef class for SFProjectUserBase **/
export class SFProjectUserRef extends ProjectUserRef {
  // Only the base class needs to define the constructor which takes the type and id
}

/** --- Generated Interface */
export interface TranslateProjectUserConfig {
  confidenceThreshold?: number;
  hasConfidenceOverride?: boolean;
  isDocumentOrientationTargetRight?: boolean;
  isFormattingOptionsShown?: boolean;
  selectedDocumentSetId?: string;
  selectedSegmentRef?: string;
  selectedSegmentChecksum?: number;
}

export abstract class SFProjectBase extends Project {
  /** type identifier string for domain type mapping */
  static readonly TYPE: string = 'sfprojectresource';
  paratextId?: string;
  checkingConfig?: CheckingConfig;
  translateConfig?: TranslateConfig;
  inputSystem?: InputSystem;
  activeSyncJob?: SyncJobBase;
  users?: SFProjectUserBase[];
  texts?: Text[];
  constructor(init?: Partial<SFProjectBase>) {
    super(SFProjectBase.TYPE, init);
  }
}

/** ResourceRef class for SFProjectBase **/
export class SFProjectRef extends ProjectRef {
  // Only the base class needs to define the constructor which takes the type and id
}
