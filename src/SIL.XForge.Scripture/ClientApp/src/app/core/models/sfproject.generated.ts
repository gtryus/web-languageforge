// <auto-generated>
//     Generated with CodeGeneratorApp v9.12.0.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
//     Last Generated on 182018-11-7 14:12
// </auto-generated>

import {User} from '../../../xforge-common/models/user';
import {UserRef} from '../../../xforge-common/models/user';
import {Text} from './text';
import {TextRef} from './text';
import {Project} from '../../../xforge-common/models/Project';
import {ProjectRef} from '../../../xforge-common/models/Project';
import {ProjectUser} from '../../../xforge-common/models/project-user';
import {ProjectUserRef} from '../../../xforge-common/models/project-user';
import {ProjectData} from '../../../xforge-common/models/project-data';
import {ProjectDataRef} from '../../../xforge-common/models/project-data';



/** --- Generated Interface */
export interface TaskConfig {
    enabled?: boolean;

}

/** --- Generated Interface */
export interface CheckingConfig extends TaskConfig {
    enabled?: boolean;
    usersSeeEachOthersResponses?: boolean;

}

/** --- Generated Interface */
export interface TranslateConfig extends TaskConfig {
    enabled?: boolean;
    sourceParatextId?: string;
    sourceInputSystem?: InputSystem;
    isTranslationDataShared?: boolean;
    confidenceThreshold?: number;
    metrics?: TranslateMetrics;

}

/** --- Generated Interface */
export interface InputSystem {
    abbreviation?: string;
    tag?: string;
    languageName?: string;
    isRightToLeft?: boolean;

}

/** --- Generated Interface */
export interface TranslateMetrics {
    activeEditTimeout?: number;
    editingTimeout?: number;

}

export class SFProjectData extends ProjectData {
    /** type identifier string for domain type mapping */
    static readonly TYPE: string = 'sFProjectData';
    owner?: SFUser;
    project?: SFProject;
    constructor(init?: Partial<SFProjectData>) {
        super(init);
    }

}



/** Ref class for SFProjectData **/
export class SFProjectDataRef extends ProjectDataRef {
    // Only the base class needs to define the constructor which takes the type and id
}

export class SyncJob extends SFProjectData {
    /** type identifier string for domain type mapping */
    static readonly TYPE: string = 'syncJob';
    percentCompleted?: number;
    state?: SyncJobState;
    constructor(init?: Partial<SyncJob>) {
        super(init);
    }

}



/** Ref class for SyncJob **/
export class SyncJobRef extends SFProjectDataRef {
    // Only the base class needs to define the constructor which takes the type and id
}

export enum SyncJobState {
    PENDING = 0, 
    SYNCING = 1, 
    IDLE = 2, 
    HOLD = 3, 
}

export class SFUser extends User {
    /** type identifier string for domain type mapping */
    static readonly TYPE: string = 'sFUser';
    projects?: SFProjectUser[];
    constructor(init?: Partial<SFUser>) {
        super(init);
    }

}



/** Ref class for SFUser **/
export class SFUserRef extends UserRef {
    // Only the base class needs to define the constructor which takes the type and id
}

export class SFProjectUser extends ProjectUser {
    /** type identifier string for domain type mapping */
    static readonly TYPE: string = 'sFProjectUser';
    translateConfig?: TranslateProjectUserConfig;
    user?: SFUser;
    project?: SFProject;
    constructor(init?: Partial<SFProjectUser>) {
        super(init);
    }

}



/** Ref class for SFProjectUser **/
export class SFProjectUserRef extends ProjectUserRef {
    // Only the base class needs to define the constructor which takes the type and id
}

/** --- Generated Interface */
export interface TranslateProjectUserConfig {
    confidenceThreshold?: number;
    hasConfidenceOverride?: boolean;
    isDocumentOrientationTargetRight?: boolean;
    isFormattingOptionsShown?: boolean;
    selectedDocumentSetId?: string;
    selectedSegmentRef?: string;
    selectedSegmentChecksum?: number;

}

export class SFProject extends Project {
    /** type identifier string for domain type mapping */
    static readonly TYPE: string = 'sFProject';
    paratextId?: string;
    checkingConfig?: CheckingConfig;
    translateConfig?: TranslateConfig;
    inputSystem?: InputSystem;
    activeSyncJob?: SyncJob;
    users?: SFProjectUser[];
    texts?: Text[];
    constructor(init?: Partial<SFProject>) {
        super(init);
    }

  // Added by hand post-generation (to prove remaining changes)
  get taskNames(): string[] {
    const names: string[] = [];
    if (this.checkingConfig != null && this.checkingConfig.enabled) {
      names.push('Community Checking');
    }
    if (this.translateConfig != null && this.translateConfig.enabled) {
      names.push('Translate');
    }
    return names;
  }
}



/** Ref class for SFProject **/
export class SFProjectRef extends ProjectRef {
    // Only the base class needs to define the constructor which takes the type and id
}
